@using OvertimeManagement.Models;
@model OvertimeManagement.ViewModel.OvertimeDisplayViewModel
@{
    bool isEditMode = ViewBag.IsEditMode;
    string formAction = isEditMode ? "Edit" : "Create";
    string modalTitle = isEditMode ? "Overtime Detail" : "Add New Overtime";

    string overtimeID = isEditMode ? Model.EmployeeID.ToString() : string.Empty;
    var employeeList = ViewBag.EmployeeList as List<OvertimeManagement.ViewModel.EmployeeDropdown>;
}

<div class="modal fade" id="overtimeDetailModal_@overtimeID" tabindex="-1" role="dialog" aria-labelledby="overtimeDetailLabel_@overtimeID">
    <div class="modal-dialog" role="document">
        <form id="overtimeForm_@overtimeID" method="post" action="@Url.Action(formAction, "Overtimes")">
            @Html.AntiForgeryToken()
            @if (isEditMode)
            {
                @Html.HiddenFor(model => model.OvertimeID)
            }

            <div class="modal-content">

                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title" id="overtimeDetailLabel_@overtimeID">@modalTitle</h4>
                </div>

                <div class="modal-body">

                    <div class="form-group">
                        @Html.Label("NIK", htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.EmployeeID, new SelectList(employeeList, "EmployeeID", "EmployeeInfo"), "-- Select Employee --", new { @id = $"EmployeeID_{overtimeID}", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label("Time Start", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.TimeStart, new { htmlAttributes = new { @id = $"TimeStart_{overtimeID}", @class = "form-control", placeholder = "Time Start" } })
                        @Html.ValidationMessageFor(model => model.TimeStart, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label("Time Finish", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.TimeFinish, new { htmlAttributes = new { @id = $"TimeFinish_{overtimeID}", @class = "form-control", placeholder = "Time Finish" } })
                        <small id="TimeError_@overtimeID" class="text-danger" style="display:none;">Time Finish must be after start date.</small>
                        @Html.ValidationMessageFor(model => model.TimeFinish, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label("Actual Hours", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.ActualHours, new { htmlAttributes = new { @id = $"ActualHours_{overtimeID}", @class = "form-control", placeholder = "Actual Hours", @readonly = "readonly", @type = "number", @step = "0.01", @min = "0" } })
                        @Html.ValidationMessageFor(model => model.ActualHours, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.Label("Calculated Hours", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.CalculatedHours, new { htmlAttributes = new { @id = $"CalculatedHours_{overtimeID}", @class = "form-control", placeholder = "Calculated Hours", @readonly = "readonly", @type = "number", @step = "0.01", @min = "0" } })
                        @Html.ValidationMessageFor(model => model.CalculatedHours, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="saveBtn_@overtimeID">Save</button>
                </div>

            </div>
        </form>
    </div>
</div>

<script type="text/javascript">
    $('#TimeStart_@overtimeID').datetimepicker({
        //format: 'YYYY-MM-DD HH:mm',
        showTodayButton: true,
        showClear: true,
        useCurrent: false
    });

    $('#TimeFinish_@overtimeID').datetimepicker({
        //format: 'YYYY-MM-DD HH:mm',
        showTodayButton: true,
        showClear: true,
        useCurrent: false
    });

    // On change TimeStart
    $('#TimeStart_@overtimeID').on('dp.change', function (e) {
        const startVal = $(this).val();
        const endVal = $('#TimeFinish_@overtimeID').val();
        if (endVal) {
            const startDate = moment(startVal, 'YYYY-MM-DD HH:mm');
            const endDate = moment(endVal, 'YYYY-MM-DD HH:mm');
            validateTime(startDate, endDate);
        }
    });

    // On change TimeFinish
    $('#TimeFinish_@overtimeID').on('dp.change', function (e) {
        const startVal = $('#TimeStart_@overtimeID').val();
        const endVal = $(this).val();
        if (startVal) {
            const startDate = moment(startVal, 'YYYY-MM-DD HH:mm');
            const endDate = moment(endVal, 'YYYY-MM-DD HH:mm');
            validateTime(startDate, endDate);
        }
    });

    // AJAX form submit on form submit event
    $(document).on('submit', '#overtimeForm_@overtimeID', function (e) {
        e.preventDefault();
        var $form = $(this);
        var overtimeID = '@overtimeID';
        var $btn = $('#saveBtn_' + overtimeID);
        $btn.prop('disabled', true);
        var formData = $form.serializeObject();
        debugger;

        $.ajax({
            url: $form.attr('action') || window.location.pathname,
            type: 'POST',
            data: $form.serialize(),
            success: function (result) {
                if (result.success) {
                    $('#overtimeDetailModal_' + overtimeID).modal('hide');
                    location.reload();
                } else if (result.message) {
                    alert(result.message);
                    $btn.prop('disabled', false);
                } else {
                    // Replace modal content with returned partial view (validation errors)
                    $('#overtimeModalContainer').html(result);
                }
            },
            error: function () {
                alert('An error occurred while saving the overtime.');
                $btn.prop('disabled', false);
            }
        });
    });

    function validateTime(startDate, endDate) {
        if (!startDate.isValid() || !endDate.isValid()) {
            $('#TimeError_@overtimeID').show().text('Invalid time.');
            return;
        }

        if (endDate.isSameOrBefore(startDate)) {
            $('#TimeError_@overtimeID').show().text('Finish time must be after start time.');
        } else {
            $('#TimeError_@overtimeID').hide();

            const diffMinutes = endDate.diff(startDate, 'minutes');
            const diffHours = diffMinutes / 60;

            $('#ActualHours_@overtimeID').val(diffHours.toFixed(2));

            if (diffHours > 3) {
                alert('Maximum overtime is 3 hours!');
            }

            if (diffHours < 1) {
                alert('Overtime duration cannot less than or equal with 0!');
            }

            const calculatedHours = diffHours * 2;
            $('#CalculatedHours_@overtimeID').val(calculatedHours.toFixed(2));
        }
    }

</script>